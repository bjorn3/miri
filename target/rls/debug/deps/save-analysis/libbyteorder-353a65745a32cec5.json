{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[16739831399183275199,18281328346797510203]},"crate_root":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src","external_crates":[{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8870715060011931042,9732787727073993113]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9119293414051633766,5186114374025626877]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[1226024591705150436,15970536208188338120]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[16177262934545929365,16479759223364254223]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[16565768034384820564,18394421997314702741]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10623821477002438094,7714506114484668336]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10372822778355350524,6810000893045526696]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[13827972861538794623,16573800335159093867]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":9,"id":{"name":"alloc_jemalloc","disambiguator":[693844393251342040,9600806600186470244]}},{"file_name":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[7991012347559430552,3575854771213790992]}}],"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":96716,"line_start":1,"line_end":3098,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1623,"byte_end":1635,"line_start":54,"line_end":54,"column_start":14,"column_end":26},"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1637,"byte_end":1650,"line_start":54,"line_end":54,"column_start":28,"column_end":41},"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":96716,"line_start":1,"line_end":3098,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/bjorn/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":162},{"krate":0,"index":422},{"krate":0,"index":450},{"krate":0,"index":448},{"krate":0,"index":444},{"krate":0,"index":440},{"krate":0,"index":436},{"krate":0,"index":432},{"krate":0,"index":428},{"krate":0,"index":424},{"krate":0,"index":288},{"krate":0,"index":292},{"krate":0,"index":454},{"krate":0,"index":482},{"krate":0,"index":480},{"krate":0,"index":476},{"krate":0,"index":472},{"krate":0,"index":468},{"krate":0,"index":464},{"krate":0,"index":460},{"krate":0,"index":456},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":368}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1201,"byte_end":1223,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"feature(i128_type)","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1297,"byte_end":1316,"line_start":41,"line_end":41,"column_start":31,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":97438,"byte_end":97450,"line_start":24,"line_end":24,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94}],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":98245,"byte_end":98252,"line_start":49,"line_end":49,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"fn (&mut self) -> Result<u8>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":99163,"byte_end":99170,"line_start":79,"line_end":79,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"fn (&mut self) -> Result<i8>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":99999,"byte_end":100007,"line_start":106,"line_end":106,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"fn <T> (&mut self) -> Result<u16>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":100864,"byte_end":100872,"line_start":133,"line_end":133,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"fn <T> (&mut self) -> Result<i16>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":101664,"byte_end":101672,"line_start":159,"line_end":159,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":102462,"byte_end":102470,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":103268,"byte_end":103276,"line_start":211,"line_end":211,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":104072,"byte_end":104080,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":104916,"byte_end":104924,"line_start":263,"line_end":263,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":105734,"byte_end":105742,"line_start":289,"line_end":289,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":106712,"byte_end":106721,"line_start":319,"line_end":319,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::io::ReadBytesExt::read_u128","value":"fn <T> (&mut self) -> Result<u128>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":107622,"byte_end":107631,"line_start":347,"line_end":347,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::io::ReadBytesExt::read_i128","value":"fn <T> (&mut self) -> Result<i128>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":108423,"byte_end":108432,"line_start":372,"line_end":372,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"fn <T> (&mut self, nbytes: usize) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":109262,"byte_end":109270,"line_start":397,"line_end":397,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"fn <T> (&mut self, nbytes: usize) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":109584,"byte_end":109596,"line_start":406,"line_end":406,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::io::ReadBytesExt::read_uint128","value":"fn <T> (&mut self, nbytes: usize) -> Result<u128>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":109913,"byte_end":109924,"line_start":415,"line_end":415,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::io::ReadBytesExt::read_int128","value":"fn <T> (&mut self, nbytes: usize) -> Result<i128>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":110891,"byte_end":110899,"line_start":446,"line_end":446,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"fn <T> (&mut self) -> Result<f32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":111842,"byte_end":111850,"line_start":477,"line_end":477,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"fn <T> (&mut self) -> Result<f64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":112891,"byte_end":112904,"line_start":509,"line_end":509,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"fn <T> (&mut self, dst: &mut [u16]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":114034,"byte_end":114047,"line_start":544,"line_end":544,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"fn <T> (&mut self, dst: &mut [u32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":115236,"byte_end":115249,"line_start":582,"line_end":582,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"fn <T> (&mut self, dst: &mut [u64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":116518,"byte_end":116532,"line_start":621,"line_end":621,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::io::ReadBytesExt::read_u128_into","value":"fn <T> (&mut self, dst: &mut [u128]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":117675,"byte_end":117688,"line_start":659,"line_end":659,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"fn <T> (&mut self, dst: &mut [i16]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":118814,"byte_end":118827,"line_start":694,"line_end":694,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"fn <T> (&mut self, dst: &mut [i32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":120012,"byte_end":120025,"line_start":732,"line_end":732,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"fn <T> (&mut self, dst: &mut [i64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":121290,"byte_end":121304,"line_start":771,"line_end":771,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::io::ReadBytesExt::read_i128_into","value":"fn <T> (&mut self, dst: &mut [i128]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":122621,"byte_end":122634,"line_start":815,"line_end":815,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":124059,"byte_end":124082,"line_start":863,"line_end":863,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":125316,"byte_end":125329,"line_start":902,"line_end":902,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":127053,"byte_end":127076,"line_start":956,"line_end":956,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":127967,"byte_end":127980,"line_start":986,"line_end":986,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134}],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":128425,"byte_end":128433,"line_start":998,"line_end":998,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"fn (&mut self, n: u8) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":128932,"byte_end":128940,"line_start":1013,"line_end":1013,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"fn (&mut self, n: i8) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":129313,"byte_end":129322,"line_start":1025,"line_end":1025,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"fn <T> (&mut self, n: u16) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":129766,"byte_end":129775,"line_start":1039,"line_end":1039,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"fn <T> (&mut self, n: i16) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":130222,"byte_end":130231,"line_start":1053,"line_end":1053,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":130675,"byte_end":130684,"line_start":1067,"line_end":1067,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":131131,"byte_end":131140,"line_start":1081,"line_end":1081,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":131584,"byte_end":131593,"line_start":1095,"line_end":1095,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":132040,"byte_end":132049,"line_start":1109,"line_end":1109,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":132493,"byte_end":132502,"line_start":1123,"line_end":1123,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":132772,"byte_end":132782,"line_start":1132,"line_end":1132,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::io::WriteBytesExt::write_u128","value":"fn <T> (&mut self, n: u128) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":133052,"byte_end":133062,"line_start":1141,"line_end":1141,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::io::WriteBytesExt::write_i128","value":"fn <T> (&mut self, n: i128) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":133691,"byte_end":133701,"line_start":1160,"line_end":1160,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"fn <T> (&mut self, n: u64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":134390,"byte_end":134399,"line_start":1183,"line_end":1183,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"fn <T> (&mut self, n: i64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":134888,"byte_end":134901,"line_start":1199,"line_end":1199,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::io::WriteBytesExt::write_uint128","value":"fn <T> (&mut self, n: u128, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":135393,"byte_end":135405,"line_start":1215,"line_end":1215,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::io::WriteBytesExt::write_int128","value":"fn <T> (&mut self, n: i128, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":135962,"byte_end":135971,"line_start":1234,"line_end":1234,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"fn <T> (&mut self, n: f32) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":136251,"byte_end":136260,"line_start":1243,"line_end":1243,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"fn <T> (&mut self, n: f64) -> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":156},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3413,"byte_end":3419,"line_start":147,"line_end":147,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":162},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4573,"byte_end":4582,"line_start":184,"line_end":184,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4817,"byte_end":4825,"line_start":193,"line_end":193,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5334,"byte_end":5342,"line_start":212,"line_end":212,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5875,"byte_end":5883,"line_start":233,"line_end":233,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6370,"byte_end":6378,"line_start":252,"line_end":252,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6900,"byte_end":6909,"line_start":272,"line_end":272,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"fn (buf: &[u8]) -> u128","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7453,"byte_end":7462,"line_start":292,"line_end":292,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8056,"byte_end":8068,"line_start":313,"line_end":313,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"fn (buf: &[u8], nbytes: usize) -> u128","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8574,"byte_end":8583,"line_start":332,"line_end":332,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9100,"byte_end":9109,"line_start":351,"line_end":351,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9654,"byte_end":9663,"line_start":372,"line_end":372,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10158,"byte_end":10167,"line_start":391,"line_end":391,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10697,"byte_end":10707,"line_start":411,"line_end":411,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"fn (buf: &mut [u8], n: u128) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11297,"byte_end":11307,"line_start":431,"line_end":431,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11947,"byte_end":11960,"line_start":452,"line_end":452,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"fn (buf: &mut [u8], n: u128, nbytes: usize) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12473,"byte_end":12481,"line_start":472,"line_end":472,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13045,"byte_end":13053,"line_start":494,"line_end":494,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13598,"byte_end":13606,"line_start":516,"line_end":516,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14156,"byte_end":14164,"line_start":538,"line_end":538,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14749,"byte_end":14758,"line_start":561,"line_end":561,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"fn (buf: &[u8]) -> i128","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15356,"byte_end":15364,"line_start":584,"line_end":584,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16033,"byte_end":16044,"line_start":608,"line_end":608,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"fn (buf: &[u8], nbytes: usize) -> i128","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16662,"byte_end":16670,"line_start":631,"line_end":631,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17269,"byte_end":17277,"line_start":654,"line_end":654,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17829,"byte_end":17838,"line_start":676,"line_end":676,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18414,"byte_end":18423,"line_start":698,"line_end":698,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18980,"byte_end":18989,"line_start":720,"line_end":720,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19551,"byte_end":19560,"line_start":742,"line_end":742,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20164,"byte_end":20174,"line_start":765,"line_end":765,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"fn (buf: &mut [u8], n: i128) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20815,"byte_end":20824,"line_start":788,"line_end":788,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21545,"byte_end":21557,"line_start":812,"line_end":812,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"fn (buf: &mut [u8], n: i128, nbytes: usize) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22187,"byte_end":22196,"line_start":835,"line_end":835,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22805,"byte_end":22814,"line_start":858,"line_end":858,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23549,"byte_end":23562,"line_start":883,"line_end":883,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24242,"byte_end":24255,"line_start":906,"line_end":906,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24935,"byte_end":24948,"line_start":929,"line_end":929,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25662,"byte_end":25676,"line_start":953,"line_end":953,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"fn (src: &[u8], dst: &mut [u128]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26366,"byte_end":26379,"line_start":977,"line_end":977,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27139,"byte_end":27152,"line_start":1003,"line_end":1003,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27912,"byte_end":27925,"line_start":1029,"line_end":1029,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28719,"byte_end":28733,"line_start":1056,"line_end":1056,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"fn (src: &[u8], dst: &mut [i128]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29561,"byte_end":29584,"line_start":1083,"line_end":1083,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30410,"byte_end":30433,"line_start":1110,"line_end":1110,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31181,"byte_end":31195,"line_start":1135,"line_end":1135,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31876,"byte_end":31890,"line_start":1158,"line_end":1158,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32571,"byte_end":32585,"line_start":1181,"line_end":1181,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33300,"byte_end":33315,"line_start":1205,"line_end":1205,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"fn (src: &[u128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33994,"byte_end":34008,"line_start":1228,"line_end":1228,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34756,"byte_end":34770,"line_start":1253,"line_end":1253,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35518,"byte_end":35532,"line_start":1278,"line_end":1278,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36314,"byte_end":36329,"line_start":1304,"line_end":1304,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"fn (src: &[i128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37176,"byte_end":37190,"line_start":1332,"line_end":1332,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38035,"byte_end":38049,"line_start":1360,"line_end":1360,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38831,"byte_end":38845,"line_start":1385,"line_end":1385,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39550,"byte_end":39564,"line_start":1408,"line_end":1408,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40269,"byte_end":40283,"line_start":1431,"line_end":1431,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41060,"byte_end":41075,"line_start":1457,"line_end":1457,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"fn (numbers: &mut [u128]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41793,"byte_end":41807,"line_start":1481,"line_end":1481,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (numbers: &mut [i16]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42592,"byte_end":42606,"line_start":1507,"line_end":1507,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (numbers: &mut [i32]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43391,"byte_end":43405,"line_start":1533,"line_end":1533,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (numbers: &mut [i64]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44262,"byte_end":44277,"line_start":1562,"line_end":1562,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"fn (numbers: &mut [i128]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44617,"byte_end":44631,"line_start":1571,"line_end":1571,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44901,"byte_end":44915,"line_start":1578,"line_end":1578,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":422},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45426,"byte_end":45435,"line_start":1598,"line_end":1598,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45417,"byte_end":45438,"line_start":1598,"line_end":1598,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45417,"byte_end":45438,"line_start":1598,"line_end":1598,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":292},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45589,"byte_end":45591,"line_start":1607,"line_end":1607,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `BigEndian`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":454},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46106,"byte_end":46118,"line_start":1626,"line_end":1626,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46097,"byte_end":46121,"line_start":1626,"line_end":1626,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46097,"byte_end":46121,"line_start":1626,"line_end":1626,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":298},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46284,"byte_end":46286,"line_start":1635,"line_end":1635,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `LittleEndian`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46966,"byte_end":46979,"line_start":1659,"line_end":1659,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":302},"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47179,"byte_end":47191,"line_start":1666,"line_end":1666,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47137,"byte_end":47169,"line_start":1665,"line_end":1665,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":127336,"byte_end":127337,"line_start":966,"line_end":966,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":136549,"byte_end":136550,"line_start":1252,"line_end":1252,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3449,"byte_end":3461,"line_start":148,"line_end":148,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3492,"byte_end":3501,"line_start":149,"line_end":149,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45457,"byte_end":45466,"line_start":1600,"line_end":1600,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46140,"byte_end":46152,"line_start":1628,"line_end":1628,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49318,"byte_end":49327,"line_start":1742,"line_end":1742,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54886,"byte_end":54898,"line_start":1953,"line_end":1953,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":97456,"byte_end":97460,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4278},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":127336,"byte_end":127337,"line_start":966,"line_end":966,"column_start":45,"column_end":46},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":111},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":127986,"byte_end":127991,"line_start":986,"line_end":986,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4310},"to":{"krate":0,"index":98}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,105,111,46,114,115],"byte_start":136549,"byte_end":136550,"line_start":1252,"line_end":1252,"column_start":47,"column_end":48},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":177},"to":{"krate":0,"index":98}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3449,"byte_end":3461,"line_start":148,"line_end":148,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":454},"to":{"krate":0,"index":156}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3492,"byte_end":3501,"line_start":149,"line_end":149,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":422},"to":{"krate":0,"index":156}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4589,"byte_end":4594,"line_start":185,"line_end":185,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2470},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4597,"byte_end":4601,"line_start":185,"line_end":185,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1730},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4604,"byte_end":4609,"line_start":185,"line_end":185,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":7448},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4612,"byte_end":4619,"line_start":185,"line_end":185,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2482},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4622,"byte_end":4624,"line_start":185,"line_end":185,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2288},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4627,"byte_end":4631,"line_start":185,"line_end":185,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":7024},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4634,"byte_end":4637,"line_start":185,"line_end":185,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2318},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4640,"byte_end":4649,"line_start":185,"line_end":185,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2282},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4652,"byte_end":4662,"line_start":185,"line_end":185,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":2336},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4678,"byte_end":4684,"line_start":186,"line_end":186,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":156},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45457,"byte_end":45466,"line_start":1600,"line_end":1600,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":422},"to":{"krate":2,"index":2482}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46140,"byte_end":46152,"line_start":1628,"line_end":1628,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":454},"to":{"krate":2,"index":2482}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49318,"byte_end":49327,"line_start":1742,"line_end":1742,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":422},"to":{"krate":0,"index":162}},{"span":{"file_name":[47,85,115,101,114,115,47,98,106,111,114,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54886,"byte_end":54898,"line_start":1953,"line_end":1953,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":454},"to":{"krate":0,"index":162}}]}